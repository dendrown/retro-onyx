(*
 * ONYXLOGO
 * Onyx Technologies logo and more!
 *
 * Author: Dennis Drown
 * System: Apple II Pascal
 *)
(*$S+*)
PROGRAM OnyxLogo(INPUT, OUTPUT);
USES AppleStuff, Transcend, TurtleGraphics;

CONST
  ONYXTECH      = 'Onyx Technologies';
  TEAMFILENAME  = 'apple1:TEAM.TEXT';

  NUMCIRCLES    = 4;
  WCHARMAX      = 40;           (* Max Turtle chars that will fit on a line *)
  WCHARWIDTH    = 8;            (* Pixels across a WChar character *)
  LETTERHEIGHT  = 20;           (* Pixel height of ONYX letters *)
  LETTERMARGIN  = 10;           (* Pixel space between ONYX letters *)
  XMAX          = 279;          (* Max horiz. pixel index for full screen *)
  YMAX          = 191;          (* Max vert.  pixel index for full screen *)
  TEXTLINE      = 8;            (* Text line height in pixels *)

TYPE
  Quadrant  = (FULL, SE, NE, NW, SW);
  Border    = (LEFT, RIGHT, BOTTOM, TOP);
  StatusLine = 1..2;

  CircleDef = Record (* Tweak for best results since our turtle isn't
                        programmed to do circles *)
                X, Y    : Integer;  (* Coords of first Arc at circle bottom *)
                ArcLen  : Integer;  (* Length of an "arc" to draw the circle *)
                ArcCnt  : Integer;  (* Num arcs in circle; use 360 multiple *)
                Gap     : Quadrant; (* Leave a gap in the specified quadrant *)
              End;
  Blueprint = Array[1..NUMCIRCLES] of CircleDef;

  NameNode  = Record (* Linked list node for names of Onyx employees *)
                Name : String;
                Next : ^NameNode;
              End;

  NameList  = Record (* Circular list of name nodes, tracking the count *)
                Curr    : ^NameNode;    (* Current name being processed *)
                Count   : Integer;      (* Total name nodes in the list *)
              End;

VAR
  KeepGoing : Char;             (* Input to see if user wishes to continue *)
  PHeap     : ^Integer;         (* pSource heap pointer *)
  I         : Integer;
  Logo      : Blueprint;
  NameCount : Integer;
  Names     : NameList;

(*
 * PrepMoveXY
 * Moves the turtle to the specified coordinates and sets the colour.
 *)
PROCEDURE PrepMoveXY(X, Y : Integer; Colour : SCREENCOLOR);
BEGIN
  PenColor(NONE);
  MoveTo(X, Y);
  TurnTo(0);
  PenColor(Colour)
END; (* MoveDrawXY *)


(*
 * PrepDrawXY
 * Moves the turtle to the specified coordinates and sets up for drawing.
 *)
PROCEDURE PrepDrawXY(X, Y : Integer);
BEGIN
  PrepMoveXY(X, Y, WHITE);
END; (* PrepDrawXY *)


(*
 * PrepEraseXY
 * Moves the turtle to the specified coordinates and sets up to erase.
 *)
PROCEDURE PrepEraseXY(X, Y : Integer);
BEGIN
  PrepMoveXY(X, Y, Black);
END; (* PrepEraseXY *)


(*
 * WriteXY:
 * Outputs a string in graphics mode
 *)
PROCEDURE WriteXY(X, Y : Integer; TxtMsg : String);
BEGIN
  PrepDrawXY(X, Y);
  WString(TxtMsg)
END; (* WriteXY *)


(*
 * Status:
 * Outputs a string in the status area (top of screen)
 *)
PROCEDURE Status(LineNum : StatusLine; Msg : String);
CONST
  SPACES  = '                                        '; (* Fill graph screen *)

VAR
  Spacer    : String;
  Y, MsgLen : Integer;

BEGIN
  Y := YMAX - (LineNum * TEXTLINE);
  Spacer := SPACES;
  MsgLen := Length(Msg);

  (* Make sure new message erases any old message on this status line *)
  If MsgLen < WCHARMAX Then
    Spacer := Copy(SPACES, 1, WCHARMAX - MsgLen)
  Else
    Spacer := '';

  WriteXY(WCHARWIDTH, Y, Concat(Msg, Spacer))
END; (* Status *)


(*
 * MakeCircle:
 * Draws a circle. (X,Y) designates the bottom. ARC gives the length of each
 * arc drawn as the turtle moves on the perimeter. Bigger arc, bigger circle.
 *)
PROCEDURE MakeCircle(X, Y, ArcLen, ArcCnt : Integer; Gap : Quadrant);
VAR
  I, Theta  : Integer;                  (* Segment index & angle for turn *)
  Up0, UpN  : Integer;                  (* Segments where we lift the pen *)

  (* Set or lift the turtle pen depending on the Gap placement *)
  PROCEDURE PenUpDown;
  BEGIN
    If Gap = FULL Then
      PenColor(WHITE)
    Else
    Begin
      If (I > Up0) AND (I < UpN) Then
        PenColor(NONE)
      Else
        PenColor(WHITE)
    End
  END;

BEGIN
  Theta := 360 DIV ArcCnt;
  Up0 := Round((Ord(Gap)-1) / 4 * ArcCnt) + 2;
  UpN := Up0 + Round(ArcCnt / 10);

  PrepDrawXY(X, Y);
  For I := 1 to ArcCnt Do
  Begin
    PenUpDown;
    Move(ArcLen);
    Turn(Theta)
  End
END; (* MakeCircle *)


(*
 * DrawOnyx:
 * Draws the stylized Onyx name starting at the specified (X,Y) position
 *)
PROCEDURE DrawOnyx(X, Y : Integer);
CONST
  ARCLEN = 6;
  ARCCNT = 10;
  TRACKING = 16;

VAR
  Diagonal          : Integer;          (* For the N & X *)
  Xc, Yc, HalfHeight: Integer;          (* For the Y: (Xc,Yc) is the centre *)

BEGIN
  Diagonal :=  Round(Sqrt(TRACKING*TRACKING + LETTERHEIGHT*LETTERHEIGHT)) + 1;
  HalfHeight := LETTERHEIGHT DIV 2;

  (* Give me an O *)
  MakeCircle(X, Y, ARCLEN, ARCCNT, FULL);

  (* Give me an N *)
  X := X + TRACKING + 1;                (* Kern wider because the O is fat *)
  PrepDrawXY(X, Y);
  TurnTo(90);   Move(LETTERHEIGHT);
  TurnTo(-45);  Move(Diagonal);

  (* Give me an Y *)
  X := X + TRACKING;
  PrepDrawXY(X + (TRACKING DIV 2), Y);
  TurnTo(90);   Move(HalfHeight);
  Xc := TurtleX;
  Yc := TurtleY;
  Turn(45);     Move(Diagonal DIV 2);
  PrepDrawXY(Xc, Yc);
  TurnTo(45);   Move(Diagonal DIV 4);

  (* Give me an X *)
  X := X + TRACKING - 2;                (* Kern narrower for Y-X harmony *)
  PrepDrawXY(X, Y);
  TurnTo(45);   Move(Diagonal);
  PrepDrawXY(X, Y + LETTERHEIGHT);
  TurnTo(-45);  Move(Diagonal)
END; (* DrawOnyx *)


(*
 * DropName:
 * Animate the letters in Name so they fall down the side of the screen.
 *)
PROCEDURE DropName(Name : String; Side : Border);
VAR
  L, X, Y, PrevY, Bottom : Integer;

BEGIN
  (*
   * The final letter falls all the way to the bottom & then they stack.
   * Letters go down either the left side or the right side of the screen.
   *)
  Bottom := TEXTLINE;
  Case Side of
    LEFT:   X := 0;
    RIGHT:  X := WCHARWIDTH * 34;   (* * (WCHARMAX-1) *)
  End;

  (* Run backwards through the name so the last letter is on the bottom. *)
  For L := Length(Name) DownTo 1 Do
  Begin
    PrevY := 0;
    For Y := YMAX - TEXTLINE DownTo Bottom Do
    Begin
      If PrevY > 0 Then
      Begin
        PrepEraseXY(X, PrevY);
        WChar(' ')
      End;
      PrepDrawXY(X, Y);
      WChar(Name[L]);
      PrevY := Y
    End;
    Bottom := Bottom + TEXTLINE
  End
END; (* DropName *)


(*
 * SlideName:
 * Animate letters in Name so they slide across the top/bottom of the screen.
 *)
PROCEDURE SlideName(Name : String; Side : Border);
VAR
  L, X, Y, PrevX, Right : Integer;

BEGIN
  (*
   * The final letter slides all the way to the right & then line up behind
   * it. Letters go across either the top side or the bottom of the screen.
   *)
  Right := XMAX - (2 * WCHARWIDTH);     (* Leave room for name drop on right *)
  Case Side of
    TOP:    Y := YMAX - TEXTLINE;
    BOTTOM: Y := 1;
  End;

  (* Run backwards through the name so the last letter is on the bottom. *)
  For L := Length(Name) DownTo 1 Do
  Begin
    PrevX := 0;
    For X := 0 To Right Do
    Begin
      PrepEraseXY(PrevX, Y);
      WChar(' ');

      PrepDrawXY(X, Y);
      WChar(Name[L]);
      PrevX := X
    End;
    Right := Right - WCHARWIDTH
  End
END; (* DropName *)


(*
 * AnimateName:
 * Ginen a name, slide or drop it along one of the screen borders.
 *)
PROCEDURE AnimateName(Name : String);

  (* Given two sides, randomly choose one of them. *)
  FUNCTION ChooseSide(A, B : Border) : Border;
  BEGIN
    Case (Random MOD 2) of
      0: ChooseSide := A;
      1: ChooseSide := B
    End
  END;

BEGIN
  (* Are we dropping or sliding? *)
  Case (Random MOD 2) of
    0: DropName(Name, ChooseSide(LEFT, RIGHT));
    1: SlideName(Name, ChooseSide(TOP, BOTTOM))
  End
END; (* AnimateName *)


(*
 * INITIALIZE
 * Initializes globals and sets up screen and
 *)
PROCEDURE Initialize;

  (* Use a larger arc count for larger circles, but always multiples of 360 *)
  PROCEDURE InitCircle(I, X0, Y0, Len, Cnt : Integer; Quad : Quadrant);
  BEGIN
    With Logo[I] Do
    Begin
      X := X0;          Y := Y0;
      ArcLen := Len;    ArcCnt := Cnt;
      Gap := Quad;
    End;
  END;

  (* Use a larger arc count for larger circles, but always multiples of 360 *)
  PROCEDURE InitNames;
  VAR
    Name       : String;
    NameFile   : Text;
    Prev, Curr : ^NameNode;

  BEGIN
    (* Ensure we have at least one name in the list *)
    New(Curr);
    Curr^.Name := ONYXTECH;
    Curr^.Next := Curr;
    Names.Curr := Curr;
    Names.Count := 1;

    (* Add in the employee names from the team file *)
    Reset(NameFile, TEAMFILENAME);
    While NOT EOF(NameFile) Do
    Begin
      ReadLn(NameFile, Name);
      Prev := Curr;
      New(Curr);
      Curr^.Name := Name;
      Curr^.Next := Names.Curr;         (* Circular list points back to head *)
      Prev^.Next := Curr;               (* Old end node points to new name *)
      Names.Count := Names.Count + 1
    End;
    Close(NameFile);
  END;

BEGIN
  Mark(PHeap);
  Randomize;
  KeepGoing := 'Y';

  InitTurtle;
  Status(1, 'Welcome to Onyx!');

  (* Use a larger arc count for larger circles, but always multiples of 360 *)
  InitCircle(1, 139, 100,  6, 10, FULL);    (* Inner... *)
  InitCircle(2, 137,  87, 10, 15, SW);
  InitCircle(3, 134,  74, 16, 15, SE);
  InitCircle(4, 132,  54, 20, 18, NW);      (* ...outer *)

  InitNames;                                (* Get the team members *)
END; (* Initialize *)


(*
 * FINALIZE
 * Releases memory to the system in preparation for program termination.
 *)
PROCEDURE Finalize;
BEGIN
  Release(PHeap);
  Names.Curr := NIL;
  Names.Count := 0
END; (* Finalize *)


(*
 * MAIN: Displays the Onyx logo
 *)
BEGIN
  Initialize;
  (* Draw logo in the centre *)
  For I := 1 TO NUMCIRCLES Do
    With Logo[I] Do
      MakeCircle(X, Y, ArcLen, ArcCnt, Gap);
  DrawOnyx(110, Logo[NUMCIRCLES].Y - LETTERHEIGHT - LETTERMARGIN);

  (* Run through team members *)
  While (Names.Curr <> NIL) AND (KeepGoing <> 'N') AND (KeepGoing <>  'n') Do
  Begin
    AnimateName(Names.Curr^.Name);
    Names.Curr := Names.Curr^.Next;

    (* Do it again...? *)
    If KeyPress Then
      Read(KEYBOARD, KeepGoing)
  End;

  (* Say goodbye... *)
  TextMode;
  WriteLn;
  WriteLn('Thank you from Onyx Technologies!');
  Finalize;
END.
